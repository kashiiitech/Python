============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
ImportError while importing test module '/home/kashi/Desktop/PF ASSIGNMENT/assignment16/test_student.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
test_student.py:1: in <module>
    from a02 import calculateArea
E   ImportError: cannot import name 'calculateArea' from 'a02' (/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py)
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.40s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
ImportError while importing test module '/home/kashi/Desktop/PF ASSIGNMENT/assignment16/test_student.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
test_student.py:2: in <module>
    from a02 import calculateTiles
E   ImportError: cannot import name 'calculateTiles' from 'a02' (/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py)
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.22s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
ImportError while importing test module '/home/kashi/Desktop/PF ASSIGNMENT/assignment16/test_student.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
test_student.py:2: in <module>
    from a02 import calculateTiles
E   ImportError: cannot import name 'calculateTiles' from 'a02' (/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py)
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.19s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
ImportError while importing test module '/home/kashi/Desktop/PF ASSIGNMENT/assignment16/test_student.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
test_student.py:2: in <module>
    from a02 import calculateTiles
E   ImportError: cannot import name 'calculateTiles' from 'a02' (/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py)
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.22s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
ImportError while importing test module '/home/kashi/Desktop/PF ASSIGNMENT/assignment16/test_student.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
test_student.py:2: in <module>
    from a02 import calculateTiles
E   ImportError: cannot import name 'calculateTiles' from 'a02' (/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py)
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.25s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py", line 10
E       def checkTilesFit(plot_widh,plot_length,tilewidth,tile_length)
E                                                                    ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.44s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py", line 10
E       def checkTilesFit(plot_widh,plot_length,tilewidth,tile_length)
E                                                                    ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.55s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
ImportError while importing test module '/home/kashi/Desktop/PF ASSIGNMENT/assignment16/test_student.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
test_student.py:3: in <module>
    from a02 import checkTilesFit
E   ImportError: cannot import name 'checkTilesFit' from 'a02' (/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py)
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.35s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
ImportError while importing test module '/home/kashi/Desktop/PF ASSIGNMENT/assignment16/test_student.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
test_student.py:3: in <module>
    from a02 import checkTilesFit
E   ImportError: cannot import name 'checkTilesFit' from 'a02' (/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py)
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.20s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py", line 10
E       def (plot_width,plot_length,tile_width,tile_length):
E           ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.57s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FF..FFFFFFFFFFF..F                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:32: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:32: ZeroDivisionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:32: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:32: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:32: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:32: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:32: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:32: TypeError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       assert None == 1
E        +  where None = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 1
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert None == 'Not Possible'
E        +  where None = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 4
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_1 - assert None == 6
FAILED test_student.py::test_calculateTiles_2 - assert None == 6
FAILED test_student.py::test_calculateTiles_3 - assert None == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert None =...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 14 failed, 6 passed in 0.27s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py", line 10
E       def def checkTilesFit(plot_width,plot_length,tile_width,tile_length):
E           ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.37s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py", line 10
E       def def checkTilesFit(plot_width,plot_length,tile_width,tile_length):
E           ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.42s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/kashi/Desktop/PF ASSIGNMENT/assignment16/a02.py", line 10
E       def def checkTilesFit(plot_width,plot_length,tile_width,tile_length):
E           ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.39s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FF..FFFFFFFFFFF..F                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       assert None == 1
E        +  where None = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 1
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert None == 'Not Possible'
E        +  where None = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 4
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_1 - assert None == 6
FAILED test_student.py::test_calculateTiles_2 - assert None == 6
FAILED test_student.py::test_calculateTiles_3 - assert None == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert None =...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 14 failed, 6 passed in 0.32s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FF..FFFFFFFFFFF..F                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       assert None == 1
E        +  where None = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 1
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert None == 'Not Possible'
E        +  where None = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 4
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_1 - assert None == 6
FAILED test_student.py::test_calculateTiles_2 - assert None == 6
FAILED test_student.py::test_calculateTiles_3 - assert None == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert None =...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 14 failed, 6 passed in 0.30s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FF..FFFFFFFFFF.FF.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       assert None == 1
E        +  where None = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 1
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert None == 'Not Possible'
E        +  where None = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 4
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_1 - assert None == 6
FAILED test_student.py::test_calculateTiles_2 - assert None == 6
FAILED test_student.py::test_calculateTiles_3 - assert None == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert None =...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 14 failed, 6 passed in 0.28s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FF..FFFFFFFFFF.FF.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:30: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:30: TypeError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       assert None == 1
E        +  where None = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 1
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert None == 'Not Possible'
E        +  where None = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 4
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_1 - assert None == 6
FAILED test_student.py::test_calculateTiles_2 - assert None == 6
FAILED test_student.py::test_calculateTiles_3 - assert None == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert None =...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 14 failed, 6 passed in 0.32s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FF..FFFFFFFFFF....                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:32: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:32: ZeroDivisionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:32: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:32: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:32: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:32: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:32: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       if plot_area//tile_area:
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:32: TypeError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 6
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       assert None == 1
E        +  where None = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 1
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert None == 'Not Possible'
E        +  where None = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
----------------------------- Captured stdout call -----------------------------
number of tiles 4
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_1 - assert None == 6
FAILED test_student.py::test_calculateTiles_2 - assert None == 6
FAILED test_student.py::test_calculateTiles_3 - assert None == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert None =...
========================= 12 failed, 8 passed in 0.38s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F....                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:31: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:31: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:31: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:31: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:31: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:31: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:31: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:31: TypeError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4 == 'Not Possible'
E        +  where 4 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == '...
========================= 11 failed, 9 passed in 0.35s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4 == 'Not Possible'
E        +  where 4 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == '...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 12 failed, 8 passed in 0.32s =========================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                    [100%]

================================== FAILURES ===================================
______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 _______________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_2 _______________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_3 _______________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_4 _______________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
______________________ test_calculateTiles_str_check_all ______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       calculateTiles = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
____________________________ test_calculateTiles_4 ____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4 == 'Not Possible'
E        +  where 4 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ===========================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErr...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppo...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppo...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppo...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppo...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsup...
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================== 12 failed, 8 passed in 0.25s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FF..FFFFFFFFFF..F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       assert None == 1
E        +  where None = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert None == 'Not Possible'
E        +  where None = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_1 - assert None == 6
FAILED test_student.py::test_calculateTiles_2 - assert None == 6
FAILED test_student.py::test_calculateTiles_3 - assert None == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert None =...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 13 failed, 7 passed in 0.27s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       return plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       return plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       return plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:27: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       return plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       return plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       return plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       return plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
    
>       return plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:27: TypeError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4 == 'Not Possible'
E        +  where 4 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == '...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 12 failed, 8 passed in 0.28s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF......F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 11 failed, 9 passed in 0.24s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF......F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 11 failed, 9 passed in 0.25s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF......F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 11 failed, 9 passed in 0.25s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF......F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:26: ZeroDivisionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'int' and 'str'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       TypeError: unsupported operand type(s) for //: 'str' and 'int'

a02.py:26: TypeError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: unsupp...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 11 failed, 9 passed in 0.22s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        if type(plot_width)==str or type (plot_length) == str or type (tile_width) == str or type(tile_length) == str:
            return "Invalid Input"
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:29: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        if type(plot_width)==str or type (plot_length) == str or type (tile_width) == str or type(tile_length) == str:
            return "Invalid Input"
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:29: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        if type(plot_width)==str or type (plot_length) == str or type (tile_width) == str or type(tile_length) == str:
            return "Invalid Input"
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:29: ZeroDivisionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 6 failed, 14 passed in 0.22s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        if type(plot_width)==str or type (plot_length) == str or type (tile_width) == str or type(tile_length) == str:
            return "Invalid Input"
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:29: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        if type(plot_width)==str or type (plot_length) == str or type (tile_width) == str or type(tile_length) == str:
            return "Invalid Input"
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:29: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width,plot_length,tile_width,tile_length):
        if type(plot_width)==str or type (plot_length) == str or type (tile_width) == str or type(tile_length) == str:
            return "Invalid Input"
    
        plot_area = plot_width*plot_length
        tile_area = tile_width*tile_length
>       x = plot_area//tile_area
E       ZeroDivisionError: integer division or modulo by zero

a02.py:29: ZeroDivisionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 6 failed, 14 passed in 0.19s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 6 failed, 14 passed in 0.21s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 6 failed, 14 passed in 0.18s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 6 failed, 14 passed in 0.21s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Non' == None
E        +  where 'Non' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 6 failed, 14 passed in 0.21s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 6 failed, 14 passed in 0.21s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.17s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.15s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.16s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 6 failed, 14 passed in 0.22s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.19s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.15s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.15s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.22s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.16s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.15s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................FF                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 2 failed, 18 passed in 0.19s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................FF                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 2 failed, 18 passed in 0.16s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/kashi/Desktop/PF ASSIGNMENT/assignment16
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................FF                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 2 failed, 18 passed in 0.16s =========================
